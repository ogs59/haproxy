1.web1和web2安装 htppd

 yum install -y httpd

2.安装haproxy

 yum install -y haporxy

[root@haproxy ~]# rpm -ql haproxy
/etc/haproxy #配置文件目录 
/etc/haproxy/haproxy.cfg #配置文件 
/etc/logrotate.d/haproxy 
/etc/rc.d/init.d/haproxy #启动脚本 
/usr/bin/halog 
/usr/sbin/haproxy #haproxy 命令 


3.haproxy 命令详解


[root@haproxy ~]# haproxy -h
HA-Proxy version 1.4.22 2012/08/09 
Copyright 2000-2012 Willy Tarreau <w@1wt.eu>
Usage : haproxy [-f <cfgfile>]* [ -vdVD ] [ -n <maxconn> ] [ -N <maxpconn> ]
        [ -p <pidfile> ] [ -m <max megs> ] 
        -v displays version ; -vv shows known build options. 
        -d enters debug mode ; -db only disables background mode. 
        -V enters verbose mode (disables quiet mode) 
        -D goes daemon 
        -q quiet mode : don't display messages 
        -c check mode : only check config files and exit 
        -n sets the maximum total # of connections (2000) 
        -m limits the usable amount of memory (in MB) 
        -N sets the default, per-proxy maximum # of connections (2000) 
        -p writes pids of all children to this file 
        -de disables epoll() usage even when available 
        -ds disables speculative epoll() usage even when available 
        -dp disables poll() usage even when available 
        -sf/-st [pid ]* finishes/terminates old pids. Must be last arguments.
haproxy [-f < 配置文件>] [ -vdVD ] [-n 最大并发连接总数] [-N 每个侦听的最大并发数]
[ -p <当前的PID文件> ] [-m <内存限制M>]
-v 显示当前版本信息；-vv 显示已知的创建选项
-d 前台，debug模式；-db 禁用后台模式，程序跑在前台 
-V 详细模式 
-D daemon模式启动 
-q 安静模式,不输出信息 
-c 对配置文件进行语法检查 
-n 最大并发连接总数 
-m 限制的可用内存大小 
-N 设置默认的连接数 
-p 设置当前的PID文件 
-de 不使用epoll 
-ds 不使用speculative epoll 
-dp 不使用poll 
-sf 程序启动后向pidlist里的进程发送FINISH信号，这个参数放在命令行的最后 
-st 程序启动后向pidlist里的进程发送TERMINATE信号，这个参数放在命令行的最后

4.查看一下默认配置文件



[root@haproxy haproxy]# cat haproxy.cfg
#--------------------------------------------------------------------- 
# Example configuration for a possible web application.  See the 
# full configuration options online. 
# 
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt  #官方配置文档，很详细，英文没问题的博友，可以看看
# 
#---------------------------------------------------------------------
#---------------------------------------------------------------------
# Global settings #全局配置文件
#--------------------------------------------------------------------- 
global 
    # to have these messages end up in /var/log/haproxy.log you will 
    # need to:  #配置日志
    # 
    # 1) configure syslog to accept network log events.  This is done 
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in 
    #    /etc/sysconfig/syslog #修改syslog配置文件
    # 
    # 2) configure local2 events to go to the /var/log/haproxy.log 
    #   file. A line like the following can be added to 
    #   /etc/sysconfig/syslog  #定义日志设备
    # 
    #    local2.*                       /var/log/haproxy.log 
    # 
    log         127.0.0.1 local2 #
#全局的日志配置 其中日志级别是[err warning info debug]
#local0 是日志设备，必须为如下24种标准syslog设备的一种:
#kern user mail daemon auth syslog lpr news
#uucp cron auth2 ftp ntp audit alert cron2
#local0 local1 local2 local3 local4 local5 local6 local7
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid #将所有进程的pid写入文件启动进程的用户必须有权限访问此文件。
    maxconn     4000 #最大连接数，默认4000
    user        haproxy #用户
    group       haproxy #组
    daemon ##创建1个进程进入deamon模式运行。此参数要求将运行模式设置为"daemon"
    # turn on stats unix socket  #unix socket 文件
    stats socket /var/lib/haproxy/stats
#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will 
# use if not designated in their block  #默认的全局设置，这些参数可以被利用配置到frontend，backend，listen组件
#--------------------------------------------------------------------- 
defaults
    mode                    http  #默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK
    log                     global #采用全局定义的日志
    option                  httplog #日志类别http日志格式
    option                  dontlognull #不记录健康检查的日志信息
    option http-server-close #每次请求完毕后主动关闭http通道
    option forwardfor       except 127.0.0.0/8 #不记录本机转发的日志
    option                  redispatch #serverId对应的服务器挂掉后,强制定向到其他健康的服务器
    retries                 3 #3次连接失败就认为服务不可用，也可以通过后面设置
    timeout http-request    10s  #请求超时
    timeout queue           1m #队列超时
    timeout connect         10s #连接超时
    timeout client          1m #客户端连接超时
    timeout server          1m #服务器连接超时
    timeout http-keep-alive 10s #长连接超时
    timeout check           10s  #检查超时
    maxconn                 3000 #最大连接数
#---------------------------------------------------------------------
# main frontend which proxys to the backends #frontend 与backends  代理配置
#--------------------------------------------------------------------- 
frontend  main *:5000
#acl策略配置
    acl url_static       path_beg       -i /static /images /javascript /stylesheets 
    acl url_static       path_end       -i .jpg .gif .png .css .js
    use_backend static          if url_static  #满足策略要求，则响应策略定义的backend页面
    default_backend             app #不满足则响应backend的默认页面
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such #定义使用静态后端图像，样式表等
#--------------------------------------------------------------------- 
backend static 
    balance     roundrobin #负载均衡模式轮询
    server      static 127.0.0.1:4331 check #服务器定义
#---------------------------------------------------------------------
# round robin balancing between the various backends 
#--------------------------------------------------------------------- 
backend app 
    balance     roundrobin #负载均衡模式轮询
    server  app1 127.0.0.1:5001 check #服务器定义，check进行健康检查
    server  app2 127.0.0.1:5002 check 
    server  app3 127.0.0.1:5003 check 
    server  app4 127.0.0.1:5004 check
#web管理页面

frontend  secure
        bind *:8888
        stats enable
        stats  uri  /admin
        stats auth admin:admin
        stats hide-version
        stats admin if TRUE
        stats  refresh  30s


